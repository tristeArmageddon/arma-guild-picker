{"version":3,"sources":["components/NavBar.jsx","components/Layout.jsx","components/SkillCompareTable.jsx","components/PerkCompareTable.jsx","components/LanguageCompareTable.jsx","components/GuildPicker.jsx","components/GuildCompare.jsx","components/SkillPicker.jsx","theme.js","App.jsx","serviceWorker.js","index.js"],"names":["useState","React","withRouter","withStyles","theme","appBar","appTitle","paddingRight","breakpoints","down","fontSize","link","textDecoration","color","opacity","fontWeight","margin","padding","sideNavLink","horizontalNavLinks","display","menuButton","width","up","activeLink","appBarContainer","flexDirection","classes","drawerOpen","setDrawerOpen","navLinks","to","label","HorizonalNavLinks","map","className","activeClassName","exact","Button","SideNavLinks","ListItem","key","Drawer","open","onClose","List","AppBar","position","IconButton","hidden-lg","aria-label","edge","onClick","Toolbar","Typography","variant","layout","backgroundColor","palette","background","default","overflow","contentWrapper","maxWidth","modalBody","textAlign","top","left","transform","minWidth","bgcolor","border","boxShadow","p","bodyText","size","bodyLink","children","setOpen","handleClose","Modal","aria-labelledby","aria-describedby","Paper","square","id","Grid","container","item","xs","SkillCompareTable","skillKey","Object","keys","data","skills","group","foundSkill","find","k","extended","sk","guildGroup","gSelected","branchesFromSk","branching","this","findGroupAndLabel","proficiency","result","gNumber","proficiencyKey","forEach","findBranchesFrom","props","g1Key","g2Key","g1Value","g2Value","proficiencies","i","skillsToObj","g1Label","g2Label","mungedSkills","mungeSkills","elevation","m","root","Table","table","TableHead","TableRow","TableCell","cell","TableBody","skillGroups","skillGroup","titleCell","values","row","style","Tooltip","disableFocusListener","disableTouchListener","title","Chip","chip","Component","textTransform","marginLeft","height","marginTop","paddingLeft","content","PerkCompareTable","perks","prk","perksToObj","mungedPerks","mungePerks","length","noContent","component","scope","LanguageCompareTable","languages","lng","languagesToObj","mungedLanguages","mungeLanguages","GuildPicker","state","guild","subguild","toggleSelection","event","setState","target","name","value","newQuery","queryString","stringify","history","location","pathname","push","search","parse","guilds","subguilds","tableConfig","justifyContent","spacing","sm","FormHelperText","FormControl","formControl","Select","onChange","inputProps","sortedguilds","gKey","MenuItem","karma","href","documentation","select","sortedsubguilds","lg","flexGrow","marginRight","primary","main","GuildCompare","guild1","guild2","SkillPicker","selectedSkills","flattenGuild","skillPrefix","profLevel","skill","itemIndex","indexOf","splice","clearSelection","findGuildsForSkills","skillsMatched","includes","karmaLabel","linkTo","sectionTitle","selectedCount","clearSelected","skillGroupTitle","chipContainer","guildCombination","guildOption","guildOptionLink","guildOptionText","float","createTheme","themeOverrides","App","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f579283b.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst { useState } = React;\r\n\r\nconst styles = (theme) => ({\r\n  appBar: {\r\n    ...theme.appBar\r\n  },\r\n  appTitle: {\r\n    paddingRight: 32,\r\n    [theme.breakpoints.down('xs')]: {\r\n      fontSize: 12,\r\n      paddingRight: 12,\r\n    }\r\n  },\r\n  link: {\r\n    textDecoration: 'none',\r\n    color: 'inherit',\r\n    opacity: 0.69,\r\n    '&>button': {\r\n      fontWeight: 600,\r\n      margin: '0 4px',\r\n      padding: '4px',\r\n    },\r\n  },\r\n  sideNavLink: {\r\n    textDecoration: 'none',\r\n    '&>button > span': {\r\n      color: 'white',\r\n      [theme.breakpoints.down('sm')]: {\r\n        fontSize: 10,\r\n      }\r\n    },\r\n  },\r\n  horizontalNavLinks: {\r\n    [theme.breakpoints.down('sm')]: {\r\n      display: 'none',\r\n    }\r\n  },\r\n  menuButton: {\r\n    width: 64,\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'none',\r\n    }\r\n  },\r\n  activeLink: {\r\n    opacity: 1,\r\n  },\r\n  appBarContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n  },\r\n});\r\n\r\nconst NavBar = ({\r\n  classes,\r\n}) => {\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  const navLinks = [\r\n    {\r\n      to: '/arma-guild-picker/',\r\n      label: 'Guild Picker'\r\n    },\r\n    {\r\n      to: '/arma-guild-picker/guild-compare/',\r\n      label: 'Guild Compare'\r\n    },\r\n    {\r\n      to: '/arma-guild-picker/skill-picker/',\r\n      label: 'Skill Picker'\r\n    },\r\n  ];\r\n\r\n  const HorizonalNavLinks = navLinks.map(({to, label}) => (\r\n    <NavLink to={to} className={classes.link} activeClassName={classes.activeLink} exact>\r\n      <Button color=\"inherit\">\r\n        {label}\r\n      </Button>\r\n    </NavLink>\r\n  ));\r\n\r\n  const SideNavLinks = navLinks.map(({to, label}) => (\r\n    <ListItem key={to}>\r\n      <NavLink to={to} className={classes.sideNavLink} activeClassName={classes.activeLink} exact>\r\n        <Button color=\"inherit\">\r\n          {label}\r\n        </Button>\r\n      </NavLink>\r\n    </ListItem>\r\n  ));\r\n\r\n  return(\r\n    <>\r\n      <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)}>\r\n        <List>\r\n          {SideNavLinks}\r\n        </List>\r\n      </Drawer>\r\n      <AppBar position=\"static\">\r\n        <div className={classes.appBarContainer}>\r\n          <IconButton\r\n            className={classes.menuButton}\r\n            hidden-lg=\"true\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"end\"\r\n            onClick={() => setDrawerOpen(!drawerOpen)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Toolbar className={classes.appBar}>\r\n            <Typography className={classes.appTitle} variant=\"h6\" color=\"inherit\">\r\n              Armageddon MUD Skills & Guilds\r\n            </Typography>\r\n            <div className={classes.horizontalNavLinks}>\r\n              {HorizonalNavLinks}\r\n            </div>\r\n          </Toolbar>\r\n        </div>\r\n      </AppBar>\r\n    </>\r\n  )\r\n}\r\nexport default withRouter(withStyles(styles)(NavBar));\r\n","import React from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport NavBar from './NavBar'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst styles = (theme) => ({\r\n  layout: {\r\n    backgroundColor: theme.palette.background.default,\r\n    overflow: 'hidden'\r\n  },\r\n  contentWrapper: {\r\n    [theme.breakpoints.down('lg')]: {\r\n      maxWidth: 1100,\r\n      margin: '0 auto'\r\n    }\r\n  },\r\n  modalBody:{\r\n    textAlign: 'center',\r\n    position: 'absolute !important',\r\n    top: 200,\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: '80%',\r\n    maxWidth: 900,\r\n    minWidth: 200,\r\n    padding: 20,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid #ff',\r\n    boxShadow: 24,\r\n    p: 4,\r\n  },\r\n  bodyText: {\r\n    size: '1rem'\r\n  },\r\n  bodyLink: {\r\n    color: 'darkOrange'\r\n  }\r\n});\r\nconst Layout = ({\r\n  theme,\r\n  children,\r\n  classes,\r\n}) => {\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  return(\r\n    <div>\r\n    <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Paper square className={classes.modalBody}>\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\">\r\n            Deprecation Notice\r\n          </Typography>\r\n          <br/>\r\n          <Typography id=\"modal-modal-description\" variant=\"body\" className={classes.bodyText}>\r\n            This tool is no longer maintained. As is well documented on\r\n            {' '}<Link className={classes.bodyLink} to=\"https://reddit.com/r/MUD\">r/MUD</Link> the staff \r\n            of Armageddon MUD have a history of being abusive towards players. \r\n            <br/><br/>\r\n            The creator of this tool now favors a game called \r\n            {' '}<Link className={classes.bodyLink} to=\"https://harshlands.net\">Harshlands</Link>, where \r\n            many former Armageddon MUD players with more sophisitication \r\n            and integrity than Armageddon MUD staff now play. Come join us!\r\n          </Typography>\r\n          <br/><br/>\r\n          <div>\r\n        <Button className={classes.bodyLink} onClick={handleClose}>Close</Button>\r\n          </div>\r\n        </Paper>\r\n      </Modal>\r\n    <Grid container className={classes.layout}>\r\n      <Grid item xs={12}>\r\n        <NavBar />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <div className={classes.contentWrapper}>\r\n          {children}\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n    </div>\r\n  )\r\n}\r\nexport default withStyles(styles)(Layout);\r\n","import React, { Component }from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport data from '../data/data.json'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nconst styles = (theme) => ({\r\n  cell: {\r\n    width: '25%',\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: 4,\r\n      fontSize: '0.65rem',\r\n      maxWidth: 65,\r\n      paddingRight: '4px !important'\r\n    },\r\n    padding: 8,\r\n  },\r\n  titleCell: {\r\n    textTransform: 'capitalize',\r\n    padding: 8,\r\n    backgroundColor: '#aaaaaa21',\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: 4,\r\n      fontSize: '0.65rem',\r\n      maxWidth: 65,\r\n      paddingRight: '4px !important'\r\n    },\r\n  },\r\n  chip: {\r\n    backgroundColor: 'rgb(48, 48, 48)',\r\n    fontSize: 8,\r\n    marginLeft: 8,\r\n    padding: 2,\r\n    height: 16,\r\n    marginTop: -1,\r\n    [theme.breakpoints.down('xs')]: {\r\n      marginLeft: 3,\r\n      fontSize: 7,\r\n      height: 13,\r\n    },\r\n    '&> span': {\r\n      paddingLeft: 4,\r\n      paddingRight: 4,\r\n      [theme.breakpoints.down('xs')]: {\r\n        paddingLeft: 2,\r\n        paddingRight: 2\r\n      }\r\n    },\r\n    '&> span::after': {\r\n      content: '\"BRANCH\"',\r\n      [theme.breakpoints.down('xs')]: {\r\n          content: '\"B\"',\r\n      }\r\n    }\r\n  }\r\n});\r\nclass SkillCompareTable extends Component {\r\n\r\n  findGroupAndLabel(skillKey) {\r\n    for (let group of Object.keys(data.skills)) {\r\n      const foundSkill = Object.keys(data.skills[group]).find((k) => k === skillKey)\r\n      if (foundSkill) {\r\n        return {\r\n          group,\r\n          label: data.skills[group][foundSkill].label,\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  findBranchesFrom({extended, sk, guildGroup, gSelected }) {\r\n    if (!extended) return;\r\n    const branchesFromSk = data[guildGroup][gSelected].branching[sk];\r\n    const {\r\n      group,\r\n      label,\r\n    } = this.findGroupAndLabel(branchesFromSk);\r\n    return data.skills[group][branchesFromSk].label\r\n  }\r\n\r\n  skillsToObj({\r\n    guildGroup,\r\n    gSelected,\r\n    proficiency,\r\n    result = {},\r\n    extended = false,\r\n    gNumber = 1,\r\n  }) {\r\n    const proficiencyKey = `${extended ? 'ex': ''}${proficiency}`;\r\n    if (data[guildGroup] && data[guildGroup][gSelected][proficiencyKey]) {\r\n      data[guildGroup][gSelected][proficiencyKey].forEach(sk => {\r\n        const {\r\n          group,\r\n          label,\r\n        } = this.findGroupAndLabel(sk);\r\n\r\n        result[group] = result[group] || {};\r\n        result[group][sk] = {\r\n          [`g${gNumber}Skill`]: label,\r\n          [`g${gNumber}SkillLevel`]: proficiency,\r\n          [`g${gNumber}SkillBranchesFrom`]: this.findBranchesFrom({ extended, sk, guildGroup, gSelected }),\r\n          group,\r\n          ...result[group][sk],\r\n        }\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  mungeSkills() {\r\n    const {\r\n      g1Key,\r\n      g2Key,\r\n      g1Value,\r\n      g2Value,\r\n    } = this.props;\r\n\r\n    let result = {};\r\n    for (let proficiency of data.proficiencies) {\r\n      for (var i = 0; i < 2; i++) {\r\n        const guildGroup = `${i === 0 ? g1Key : g2Key}s`\r\n        const gSelected = i === 0 ? g1Value : g2Value;\r\n        const gNumber = i + 1;\r\n        for (let extended of [true, false]) {\r\n          result = this.skillsToObj({result, guildGroup, gSelected, proficiency, extended, gNumber})\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      g1Label,\r\n      g2Label,\r\n      g1Key,\r\n      g2Key,\r\n      classes,\r\n    } = this.props;\r\n    const mungedSkills = this.mungeSkills();\r\n    return (\r\n      <Paper square elevation={3} m={3} className={classes.root}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.cell}>\r\n                {g1Label} Skills\r\n              </TableCell>\r\n              <TableCell className={classes.cell}/>\r\n              <TableCell className={classes.cell}>\r\n                {g2Label} Skills\r\n              </TableCell>\r\n              <TableCell className={classes.cell}/>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.skillGroups.map(skillGroup => (\r\n              <>\r\n                <TableRow key={skillGroup}>\r\n                  <TableCell className={classes.titleCell}>\r\n                    {skillGroup}\r\n                  </TableCell>\r\n                  <TableCell className={classes.titleCell} />\r\n                  <TableCell className={classes.titleCell} />\r\n                  <TableCell className={classes.titleCell} />\r\n                </TableRow>\r\n                {mungedSkills[skillGroup] && Object.values(mungedSkills[skillGroup]).map(row => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell\r\n                      className={classes.cell}\r\n                      style={{\r\n                        backgroundColor: row['g1SkillBranchesFrom'] ? 'rgba(255, 236, 179, 0.2)' : 'inherit'\r\n                      }}\r\n                    >\r\n                    {\r\n                      row['g1SkillBranchesFrom'] && row['g1Skill']\r\n                      ? (\r\n                        <Tooltip\r\n                          disableFocusListener disableTouchListener \r\n                          title={`branches from ${row['g1SkillBranchesFrom']}`}\r\n                          aria-label={`branches from ${row['g1SkillBranchesFrom']}`}\r\n                        >\r\n                          <div>\r\n                            {row['g1Skill']}\r\n                          </div>\r\n                        </Tooltip>\r\n                      ) : row['g1Skill']\r\n                    }\r\n                    </TableCell>\r\n                    <TableCell\r\n                      className={classes.cell}\r\n                      style={{\r\n                        backgroundColor: row['g1SkillBranchesFrom'] ? 'rgba(255, 236, 179, 0.2)' : 'inherit'\r\n                      }}\r\n                    >\r\n                    {\r\n                      row['g1SkillBranchesFrom']\r\n                      ? (\r\n                        <Tooltip\r\n                          disableFocusListener disableTouchListener \r\n                          title={`branches from ${row['g1SkillBranchesFrom']}`}\r\n                          aria-label={`branches from ${row['g1SkillBranchesFrom']}`}\r\n                        >\r\n                          <div>\r\n                            {row['g1SkillLevel']}\r\n                            {row['g1SkillBranchesFrom'] && <Chip className={classes.chip} />}\r\n                          </div>\r\n                        </Tooltip>\r\n                      ) : row['g1SkillLevel']\r\n                    }\r\n                    </TableCell>\r\n                    <TableCell\r\n                      className={classes.cell}\r\n                      style={{\r\n                        backgroundColor: row['g2SkillBranchesFrom'] ? 'rgba(255, 236, 179, 0.2)' : 'inherit'\r\n                      }}\r\n                    >\r\n                    {\r\n                      row['g2SkillBranchesFrom'] && row['g2Skill']\r\n                      ? (\r\n                        <Tooltip\r\n                          disableFocusListener disableTouchListener \r\n                          title={`branches from ${row['g2SkillBranchesFrom']}`}\r\n                          aria-label={`branches from ${row['g2SkillBranchesFrom']}`}\r\n                        >\r\n                          <div>\r\n                            {row['g2Skill']}\r\n                          </div>\r\n                        </Tooltip>\r\n                      ) : row['g2Skill']\r\n                    }\r\n                    </TableCell>\r\n                    <TableCell\r\n                      className={classes.cell}\r\n                      style={{\r\n                        backgroundColor: row['g2SkillBranchesFrom'] ? 'rgba(255, 236, 179, 0.2)' : 'inherit'\r\n                      }}\r\n                    >\r\n                    {\r\n                      row['g2SkillBranchesFrom']\r\n                      ? (\r\n                        <Tooltip\r\n                          disableFocusListener disableTouchListener \r\n                          title={`branches from ${row['g2SkillBranchesFrom']}`}\r\n                          aria-label={`branches from ${row['g2SkillBranchesFrom']}`}\r\n                        >\r\n                          <div>\r\n                            {row['g2SkillLevel']}\r\n                            {row['g2SkillBranchesFrom'] && <Chip className={classes.chip} />}\r\n                          </div>\r\n                        </Tooltip>\r\n                      ) : row['g2SkillLevel']\r\n                    }\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles)(SkillCompareTable);\r\n\r\n","import React, { Component }from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport data from '../data/data.json'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst styles = (theme) => ({\r\n  cell: {\r\n    width: '50%',\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: 4,\r\n      fontSize: '0.65rem',\r\n      maxWidth: 65,\r\n      paddingRight: '4px !important'\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      padding: 8,\r\n    },\r\n  },\r\n  noContent: {\r\n    padding: '1rem',\r\n    textAlign: 'center',\r\n    width: '100%'\r\n  }\r\n});\r\nclass PerkCompareTable extends Component {\r\n  perksToObj({\r\n    guildGroup,\r\n    gSelected,\r\n    gNumber = 1,\r\n    result = {},\r\n  }) {\r\n    if (data[guildGroup] && data[guildGroup][gSelected].perks) {\r\n      data[guildGroup][gSelected].perks.forEach(prk => {\r\n        result[prk] = {\r\n          [`g${gNumber}Perk`]: data.skills.perks[prk].label,\r\n          ...result[prk],\r\n        }\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  mungePerks() {\r\n    const {\r\n      g1Key,\r\n      g2Key,\r\n      g1Value,\r\n      g2Value,\r\n    } = this.props;\r\n\r\n    let result = {};\r\n    for (var i = 0; i < 2; i++) {\r\n      const guildGroup = `${i === 0 ? g1Key : g2Key}s`\r\n      const gSelected = i === 0 ? g1Value : g2Value;\r\n      const gNumber = i + 1;\r\n      result = this.perksToObj({result, guildGroup, gSelected, gNumber})\r\n    }\r\n    return Object.values(result);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      g1Label,\r\n      g2Label,\r\n      g1Key,\r\n      g2Key,\r\n      classes,\r\n    } = this.props;\r\n\r\n    const mungedPerks = this.mungePerks();\r\n    return (\r\n      <Paper square className={classes.root}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.cell}>\r\n                {g1Label} Perks\r\n              </TableCell>\r\n              <TableCell className={classes.cell}>\r\n                {g2Label} Perks\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {(!mungedPerks || mungedPerks.length === 0) && (\r\n              <TableRow key=\"noPerks\">\r\n                <Typography className={classes.noContent}>Neither group has perks</Typography>\r\n              </TableRow>\r\n            )}\r\n            {mungedPerks && mungedPerks.length > 0  && mungedPerks.map(row => (\r\n              <TableRow key={row.id}>\r\n                <TableCell className={classes.cell} component=\"th\" scope=\"row\">\r\n                  {row['g1Perk']}\r\n                </TableCell>\r\n                <TableCell className={classes.cell}>{row['g2Perk']}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles)(PerkCompareTable);\r\n\r\n","import React, { Component }from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport data from '../data/data.json'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst styles = (theme) => ({\r\n  cell: {\r\n    width: '50%',\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: 4,\r\n      fontSize: '0.65rem',\r\n      maxWidth: 65,\r\n      paddingRight: '4px !important'\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      padding: 8,\r\n    },\r\n  },\r\n  noContent: {\r\n    padding: '1rem',\r\n    textAlign: 'center',\r\n    width: '100%'\r\n  }\r\n});\r\nclass LanguageCompareTable extends Component {\r\n  languagesToObj({\r\n    guildGroup,\r\n    gSelected,\r\n    gNumber = 1,\r\n    result = {},\r\n  }) {\r\n    if (data[guildGroup] && data[guildGroup][gSelected].languages) {\r\n      data[guildGroup][gSelected].languages.forEach(lng => {\r\n        result[lng] = {\r\n          [`g${gNumber}Language`]: data.skills.languages[lng].label,\r\n          ...result[lng],\r\n        }\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  mungeLanguages() {\r\n    const {\r\n      g1Key,\r\n      g2Key,\r\n      g1Value,\r\n      g2Value,\r\n    } = this.props;\r\n\r\n    let result = {};\r\n      for (var i = 0; i < 2; i++) {\r\n        const guildGroup = `${i === 0 ? g1Key : g2Key}s`\r\n        const gSelected = i === 0 ? g1Value : g2Value;\r\n        const gNumber = i + 1;\r\n        result = this.languagesToObj({result, guildGroup, gSelected, gNumber})\r\n    }\r\n    return Object.values(result);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      g1Label,\r\n      g2Label,\r\n      g1Key,\r\n      g2Key,\r\n      classes,\r\n    } = this.props;\r\n\r\n    const mungedLanguages = this.mungeLanguages();\r\n    return (\r\n      <Paper square className={classes.root}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.cell}>\r\n                {g1Label} Languages\r\n              </TableCell>\r\n              <TableCell className={classes.cell}>\r\n                {g2Label} Languages\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {(!mungedLanguages || mungedLanguages.length === 0) && (\r\n              <TableRow key=\"noLanguages\">\r\n                <Typography className={classes.noContent}>Neither group has bonus languages</Typography>\r\n              </TableRow>\r\n            )}\r\n            {mungedLanguages && mungedLanguages.length > 0  && mungedLanguages.map(row => (\r\n              <TableRow key={row.id}>\r\n                <TableCell className={classes.cell} component=\"th\" scope=\"row\">\r\n                  {row['g1Language']}\r\n                </TableCell>\r\n                <TableCell className={classes.cell}>{row['g2Language']}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles)(LanguageCompareTable);\r\n\r\n","import React, { Component }from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport queryString from 'query-string';\r\nimport data from '../data/data.json'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SkillCompareTable from './SkillCompareTable';\r\nimport PerkCompareTable from './PerkCompareTable';\r\nimport LanguageCompareTable from './LanguageCompareTable';\r\n\r\nconst styles = (theme) => ({\r\n  container: {\r\n    flexGrow: 1,\r\n  },\r\n  formControl: {\r\n    width: 'calc(100% - 1rem)',\r\n    marginRight: '1rem',\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n});\r\nclass GuildPicker extends Component {\r\n  state = {\r\n    guild: 'enforcer',\r\n    subguild: 'hunter',\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {\r\n      location\r\n    } = this.props;\r\n    const {\r\n      guild,\r\n      subguild\r\n    } = queryString.parse(location.search);\r\n\r\n    if (data.guilds[guild]) {\r\n      this.setState({ guild });\r\n    }\r\n    if (data.subguilds[subguild]) {\r\n      this.setState({ subguild });\r\n    }\r\n  }\r\n\r\n  toggleSelection = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n    const {\r\n      guild,\r\n      subguild\r\n    } = this.state;\r\n    const newQuery = queryString.stringify({\r\n      ...{\r\n        guild,\r\n        subguild,\r\n      },\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    const {\r\n      history,\r\n      location: {\r\n        pathname = '/'\r\n      } = {}\r\n    } = this.props;\r\n    history.push({\r\n      pathname,\r\n      search: newQuery,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      classes\r\n    } = this.props;\r\n    const {\r\n      guild,\r\n      subguild,\r\n    } = this.state;\r\n    const tableConfig = {\r\n      g1Label: \"Guild\",\r\n      g2Label: \"Subguild\",\r\n      g1Key: \"guild\",\r\n      g2Key: \"subguild\",\r\n      g1Value: guild,\r\n      g2Value: subguild,\r\n    };\r\n    return (\r\n      <>\r\n        <Grid container justifyContent=\"center\" spacing={2} className={classes.container}>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormHelperText>Guild</FormHelperText>\r\n            <FormControl className={classes.formControl}>\r\n              <Select\r\n                value={this.state.guild}\r\n                onChange={this.toggleSelection}\r\n                inputProps={{\r\n                  name: 'guild',\r\n                  id: 'guild-select',\r\n                }}\r\n              >\r\n                {data.sortedguilds.map(gKey => (\r\n                  <MenuItem value={gKey}>\r\n                    {data.guilds[gKey].label}\r\n                    {data.guilds[gKey].karma ? ` (${data.guilds[gKey].karma})` : ''}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              <FormHelperText>\r\n                <span>Documentation: </span>\r\n                <a\r\n                  className={classes.link}\r\n                  href={data.guilds[this.state.guild].documentation}\r\n                  target=\"_blank\"\r\n                >\r\n                  {data.guilds[this.state.guild].documentation}\r\n                </a>\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormHelperText>Subguild</FormHelperText>\r\n            <FormControl className={classes.formControl}>\r\n              <Select\r\n                className={classes.select}\r\n                value={this.state.subguild}\r\n                onChange={this.toggleSelection}\r\n                inputProps={{\r\n                  name: 'subguild',\r\n                  id: 'subguild-select',\r\n                }}\r\n              >\r\n                {data.sortedsubguilds.map(gKey => (\r\n                  <MenuItem value={gKey}>\r\n                    {data.subguilds[gKey].label}\r\n                    {data.subguilds[gKey].karma ? ` (${data.subguilds[gKey].karma} karma)` : ''}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              <FormHelperText>\r\n                <span>Documentation: </span>\r\n                <a\r\n                  className={classes.link}\r\n                  href={data.subguilds[this.state.subguild].documentation}\r\n                  target=\"_blank\"\r\n                >\r\n                  {data.subguilds[this.state.subguild].documentation}\r\n                </a>\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container justifyContent=\"center\" spacing={2} className={classes.container}>\r\n          <Grid item xs={12} lg={6}>\r\n            <SkillCompareTable\r\n              {...tableConfig}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} lg={6}>\r\n            <Grid container spacing={2} className={classes.container}>\r\n              <Grid item xs={12}>\r\n                <PerkCompareTable\r\n                  {...tableConfig}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <LanguageCompareTable\r\n                  {...tableConfig}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles)(GuildPicker);\r\n","import React, { Component }from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport queryString from 'query-string';\r\nimport data from '../data/data.json'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SkillCompareTable from './SkillCompareTable';\r\nimport PerkCompareTable from './PerkCompareTable';\r\nimport LanguageCompareTable from './LanguageCompareTable';\r\n\r\nconst styles = (theme) => ({\r\n  container: {\r\n    flexGrow: 1,\r\n  },\r\n  formControl: {\r\n    width: 'calc(100% - 1rem)',\r\n    marginRight: '1rem',\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n});\r\nclass GuildCompare extends Component {\r\n  state = {\r\n    guild1: 'enforcer',\r\n    guild2: 'infiltrator',\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {\r\n      location\r\n    } = this.props;\r\n    const {\r\n      guild1,\r\n      guild2\r\n    } = queryString.parse(location.search);\r\n\r\n    if (data.guilds[guild1]) {\r\n      this.setState({ guild1 });\r\n    }\r\n    if (data.guilds[guild2]) {\r\n      this.setState({ guild2 });\r\n    }\r\n  }\r\n\r\n  toggleSelection = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n    const {\r\n      guild1,\r\n      guild2\r\n    } = this.state;\r\n    const newQuery = queryString.stringify({\r\n      ...{\r\n        guild1,\r\n        guild2,\r\n      },\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    const {\r\n      history,\r\n      location: {\r\n        pathname = '/'\r\n      } = {}\r\n    } = this.props;\r\n    history.push({\r\n      pathname,\r\n      search: newQuery,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      classes\r\n    } = this.props;\r\n    const {\r\n      guild1,\r\n      guild2,\r\n    } = this.state;\r\n    const tableConfig = {\r\n      g1Label: \"Guild 1\",\r\n      g2Label: \"Guild 2\",\r\n      g1Key: \"guild\",\r\n      g2Key: \"guild\",\r\n      g1Value: guild1,\r\n      g2Value: guild2,\r\n    };\r\n    return (\r\n      <>\r\n        <Grid container justifyContent=\"center\" spacing={16} className={classes.container}>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormHelperText>Guild 1</FormHelperText>\r\n            <FormControl className={classes.formControl}>\r\n              <Select\r\n                value={this.state.guild1}\r\n                onChange={this.toggleSelection}\r\n                inputProps={{\r\n                  name: 'guild1',\r\n                  id: 'guild1-select',\r\n                }}\r\n              >\r\n                {data.sortedguilds.map(gKey => (\r\n                  <MenuItem value={gKey}>\r\n                    {data.guilds[gKey].label}\r\n                    {data.guilds[gKey].karma ? ` (${data.guilds[gKey].karma})` : ''}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              <FormHelperText>\r\n                <span>Documentation: </span>\r\n                <a\r\n                  className={classes.link}\r\n                  href={data.guilds[this.state.guild1].documentation}\r\n                  target=\"_blank\"\r\n                >\r\n                  {data.guilds[this.state.guild1].documentation}\r\n                </a>\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormHelperText>Guild 2</FormHelperText>\r\n            <FormControl className={classes.formControl}>\r\n              <Select\r\n                className={classes.select}\r\n                value={this.state.guild2}\r\n                onChange={this.toggleSelection}\r\n                inputProps={{\r\n                  name: 'guild2',\r\n                  id: 'guild2-select',\r\n                }}\r\n              >\r\n                {data.sortedguilds.map(gKey => (\r\n                  <MenuItem value={gKey}>\r\n                    {data.guilds[gKey].label}\r\n                    {data.guilds[gKey].karma ? ` (${data.guilds[gKey].karma})` : ''}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              <FormHelperText>\r\n                <span>Documentation: </span>\r\n                <a\r\n                  className={classes.link}\r\n                  href={data.guilds[this.state.guild2].documentation}\r\n                  target=\"_blank\"\r\n                >\r\n                  {data.guilds[this.state.guild2].documentation}\r\n                </a>\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container justifyContent=\"center\" spacing={16} className={classes.container}>\r\n          <Grid item xs={12} lg={6}>\r\n            <SkillCompareTable\r\n              {...tableConfig}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} lg={6}>\r\n            <Grid container spacing={16} className={classes.container}>\r\n              <Grid item xs={12}>\r\n                <PerkCompareTable\r\n                  {...tableConfig}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <LanguageCompareTable\r\n                  {...tableConfig}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles)(GuildCompare);\r\n","import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport data from '../data/data.json';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst styles = (theme) => ({\r\n  sectionTitle: {\r\n    fontSize: 20,\r\n    padding: 6,\r\n  },\r\n  skillGroupTitle: {\r\n    fontSize: 18,\r\n    padding: 20,\r\n    textTransform: 'capitalize',\r\n  },\r\n  guildOptionText: {\r\n    padding: '0 20px',\r\n  },\r\n  guildOptionLink: {\r\n    color: '#ffffff5e'\r\n  },\r\n  selectedCount: {\r\n    color: '#ffffff5e'\r\n  },\r\n  chipContainer: {\r\n    padding: '0 20px'\r\n  },\r\n  chip: {\r\n    margin: '0 4px 4px 0',\r\n  },\r\n  clearSelected: {\r\n    float: 'right',\r\n  }\r\n});\r\nclass SkillPicker extends Component {\r\n  state = {\r\n    selectedSkills: [],\r\n    guilds: [],\r\n    subguilds: [],\r\n  }\r\n\r\n  componentWillMount() {\r\n    for (let guildGroup of ['guilds', 'subguilds']) {\r\n      const guilds = data[guildGroup] ? Object.keys(data[guildGroup]) : [];\r\n      const result = [];\r\n      for (let guild of guilds) {\r\n        result.push({\r\n          key: guild,\r\n          label: data[guildGroup][guild].label,\r\n          skills: this.flattenGuild(guildGroup, guild),\r\n          perks: data[guildGroup][guild].perks,\r\n          karma: data[guildGroup][guild].karma,\r\n        });\r\n      }\r\n      this.setState({\r\n        [guildGroup]: result\r\n      })\r\n    }\r\n  }\r\n\r\n  flattenGuild = (guildGroup, guild) => {\r\n    let result = [];\r\n    for (let skillPrefix of ['', 'ex']) {\r\n      for (let profLevel of ['languages', ...data.proficiencies]) {\r\n        if (data[guildGroup][guild][`${skillPrefix}${profLevel}`]) {\r\n          result = [...data[guildGroup][guild][`${skillPrefix}${profLevel}`], ...result]\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  toggleSelection = (event, skill) => {\r\n    const {\r\n      selectedSkills\r\n    } = this.state;\r\n\r\n    const itemIndex = selectedSkills.indexOf(skill)\r\n    if (itemIndex === -1) {\r\n      this.setState({ selectedSkills: [skill, ...selectedSkills]})\r\n    } else {\r\n      selectedSkills.splice(itemIndex, 1);\r\n      this.setState({ selectedSkills: [...selectedSkills]})\r\n    }\r\n  }\r\n\r\n  clearSelection = () => {\r\n    this.setState({ selectedSkills: [] })\r\n  }\r\n\r\n  findGuildsForSkills = () => {\r\n    const result = [];\r\n    for (let guild of this.state.guilds) {\r\n      for (let subguild of this.state.subguilds) {\r\n        let skillsMatched = 0;\r\n        for (let skill of this.state.selectedSkills) {\r\n          if (\r\n            guild.skills.includes(skill)\r\n            || subguild.skills.includes(skill)\r\n            || guild.perks.includes(skill)\r\n            || subguild.perks.includes(skill)\r\n          ) {\r\n            skillsMatched++;\r\n          }\r\n        }\r\n\r\n        if (skillsMatched === this.state.selectedSkills.length) {\r\n          const karmaLabel = (guild.karma || subguild.karma) ? ` (${guild.karma + subguild.karma})` : '';\r\n          result.push({\r\n            label: `${guild.label}/${subguild.label}${karmaLabel}`,\r\n            linkTo: `/arma-guild-picker/?guild=${guild.key}&subguild=${subguild.key}`\r\n          })\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  render () {\r\n    const {\r\n      classes,\r\n    } = this.props;\r\n    const {\r\n      selectedSkills,\r\n    } = this.state;\r\n    return (\r\n      <Grid container justifyContent=\"center\" spacing={2} className={classes.container}>\r\n        <Grid item xs={12} sm={6}>\r\n          <Paper square>\r\n            <Grid container>\r\n              <Grid item xs={12} sm={6}>\r\n                <Typography className={classes.sectionTitle}>\r\n                  Skills\r\n                  {' '}\r\n                  <span className={classes.selectedCount}>({selectedSkills.length} selected)</span>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                {selectedSkills.length > 0 && (<Button\r\n                  size=\"small\"\r\n                  className={classes.clearSelected}\r\n                  onClick={() => this.clearSelection()}\r\n                >\r\n                  Clear\r\n                </Button>)}\r\n              </Grid>\r\n              </Grid>\r\n            {['languages', 'perks', ...data.skillGroups].map(skillGroup => (\r\n              <>\r\n                <Typography className={classes.skillGroupTitle}>{skillGroup}</Typography>\r\n                <div className={classes.chipContainer}>\r\n                  {Object.keys(data.skills[skillGroup]).map((key) => (\r\n                    <Chip\r\n                      className={classes.chip}\r\n                      onClick={(event) => this.toggleSelection(event, key)}\r\n                      label={data.skills[skillGroup][key].label}\r\n                      color={selectedSkills.includes(key) ? 'primary' : ''}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              </>\r\n            ))}\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <Paper square>\r\n            <Typography className={classes.sectionTitle}>\r\n              Matching Guild\r\n              {' '}\r\n              <span className={classes.selectedCount}>(Click to View in Guild Picker)</span>\r\n            </Typography>\r\n            <Grid container justifyContent=\"center\" spacing={2} className={classes.container}>\r\n              {this.findGuildsForSkills().map(guildCombination => (\r\n                <Grid item xs={12} sm={6} className={classes.guildOption}>\r\n                  <Link to={guildCombination.linkTo} className={classes.guildOptionLink}>\r\n                    <Typography className={classes.guildOptionText}>\r\n                      {guildCombination.label}\r\n                    </Typography>\r\n                  </Link>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SkillPicker);\r\n","const theme = {\r\n  \"palette\": {\r\n    \"type\": \"dark\",\r\n    \"primary\": {\r\n      \"main\": \"#d84315\",\r\n      \"contrastText\": \"rgba(0, 0, 0, 0.87)\"\r\n    },\r\n    \"secondary\": {\r\n      \"main\": \"#5d4037\"\r\n    },\r\n    \"primary1Color\": \"#d84315\",\r\n    \"primary2Color\": \"#5d4037\",\r\n    \"accent1Color\": \"#eeeeee\",\r\n    \"accent2Color\": \"rgba(255, 236, 179, 0.3)\",\r\n    \"accent3Color\": \"#ff8f00\"\r\n  },\r\n  \"tabs\": {\r\n    \"backgroundColor\": \"#e64a19\",\r\n    \"textColor\": \"rgba(33, 33, 33, 0.54)\"\r\n  },\r\n  \"tableRow\": {\r\n    \"selectedColor\": \"rgba(255, 255, 255, 0.1)\",\r\n    \"hoverColor\": \"rgba(255, 236, 179, 0.15)\"\r\n  },\r\n  \"toggle\": {\r\n    \"thumbOffColor\": \"rgba(255, 236, 179, 0.51)\",\r\n    \"labelDisabledColor\": \"rgba(255, 255, 255, 0.29)\",\r\n    \"thumbDisabledColor\": \"rgba(255, 255, 255, 0.48)\"\r\n  }\r\n};\r\nexport default theme;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Layout from './components/Layout'\r\nimport GuildPicker from './components/GuildPicker'\r\nimport GuildCompare from './components/GuildCompare'\r\nimport SkillPicker from './components/SkillPicker'\r\nimport { MuiThemeProvider, createTheme } from '@material-ui/core/styles';\r\nimport themeOverrides from './theme.js';\r\nconst theme = createTheme(themeOverrides);\r\n\r\nfunction App() {\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <Router>\r\n        <Layout>\r\n          <Route path=\"/arma-guild-picker/\" exact component={GuildPicker} />\r\n          <Route path=\"/arma-guild-picker/guild-picker/\" component={GuildPicker} />\r\n          <Route path=\"/arma-guild-picker/guild-compare/\" component={GuildCompare} />\r\n          <Route path=\"/arma-guild-picker/skill-picker/\" component={SkillPicker} />\r\n        </Layout>\r\n      </Router>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}